<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/7/18 0018
 * Time: 上午 11:29
 *
 *折构函数
 * 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。
 */
class MyDestructableClass{
    function  __construct()
    {
        print "构造函数 \n";
        $this->name="MyDestructableClass";
    }
    function __destruct()
    {
        // TODO: Implement __destruct() method.
        print "销毁".$this->name ."\n";
    }
}
$obj=new MyDestructableClass();

//继承
class Child_Site extends Site{
    var $category;
    function  setCate($par){
        $this->category=$par;
    }
    function getCate(){
        echo $this->category.PHP_EOL;
    }
}

//方法重写
function getUrl(){
    echo $this->url.PHP_EOL;
    return $this->url;
}
function getTitle(){
    echo $this->title.PHP_EOL;
    return $this->title;
}

//访问控制
/*
 * Define MyClass
 */
class MyClass{
    public $public='Public';
    protected $protected='protected';
    private $private='private';
    function printHello(){
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}
$obj=new MyClass();
echo $obj->public; // 这行能被正常执行
//echo $obj->protected; // 这行会产生一个致命错误
//echo $obj->private; // 这行也会产生一个致命错误
$obj->printHello(); // 输出 Public、Protected 和 Private

/*
 * Define MyClass2
 */
class MyClass2 extends MyClass{
    // 可以对 public 和 protected 进行重定义，但 private 而不能
    protected $protected='Protected2';
    function printHello()
    {
        parent::printHello(); // TODO: Change the autogenerated stub
        echo $this->public;
        echo $this->protected;
        #echo $this->private;
    }
}
$obj2 = new MyClass2();
echo $obj2->public; // 这行能被正常执行
#echo $obj2->private; // 未定义 private
#echo $obj2->protected; // 这行会产生一个致命错误
$obj2->printHello(); // 输出 Public、Protected2 和 Undefined

//方法的访问控制
class MyClass3{
    //声明一个公有的构造函数
    public  function __construct(){}
    //声明一个公有的方法
    public function MyPublic(){}
    //声明一个受保护的方法
    protected function MyProtected(){}
    //声明一个私有的方法
    private function MyPrivate(){}
    //此方法公有
    function Foo(){
        $this->MyPublic();
        $this->MyPrivate();
        $this->MyProtected();
    }
}

$myclass = new MyClass3;
$myclass->MyPublic(); // 这行能被正常执行
#$myclass->MyProtected(); // 这行会产生一个致命错误
#$myclass->MyPrivate(); // 这行会产生一个致命错误
$myclass->Foo(); // 公有，受保护，私有都可以执行


//接口

//声明一个接口
interface itemplate
{
    public function  setVariable($name,$var);
    public function getHtml($template);
}
//实现接口
class Template implements itemplate
{
    private $vars=array();
    public function setVariable($name, $var)
    {
        // TODO: Implement setVariable() method.
        $this->vars[$name]=$var;
    }
    public function getHtml($template)
    {
        // TODO: Implement getHtml() method.
        foreach ($this->vars as $name=>$value){
            $template=str_replace('{'.$name.'}',$value,$template);
        }
        return $template;
    }


}
//常量
class MyClass4{
    const constant='常量';
    function showConstant(){
        echo self::constant.PHP_EOL;
    }
}
echo MyClass4::constant.PHP_EOL;


$classname="Myclass4";
echo $classname::constant.PHP_EOL;

$class=new MyClass();
$class->showConstant();

echo $class::constant.PHP_EOL;



?>